name: Unit tests and E2E tests
description: Run unit tests and E2E tests using Jest and Playwright

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: üîç Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - run: npm install -g pnpm
      - name: Install Dependencies
        run: pnpm install
      - name: Run Lint
        run: pnpm lint
  unit-tests:
    name: üß™ Jest Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - run: npm install -g pnpm
      - name: Install Dependencies
        run: pnpm install
      - name: Run Unit Tests
        run: pnpm test

  e2e-tests:
    name: üåê Playwright E2E Tests
    runs-on: ubuntu-latest
    environment: Mecanizou
    needs: unit-tests
    env:
      NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      PLAYWRIGHT: true
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - run: npm install -g pnpm
      - run: pnpm install
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Build Production
        run: pnpm build
      - name: Run E2E Tests
        run: pnpm test:e2e
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
  deploy:
    name: üöÄ Deploy to vercel
    runs-on: ubuntu-latest
    environment: Mecanizou
    needs: e2e-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Vercel Login
        run: vercel login --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy para o Vercel
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          vercel pull --yes --environment=production --token $VERCEL_TOKEN
          vercel build --prod --token $VERCEL_TOKEN
          vercel deploy --prebuilt --prod --token $VERCEL_TOKEN
